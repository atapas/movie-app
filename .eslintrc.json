{
  "env": {
    "browser": true,
    "node": true,
    "es2021": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": ["react", "react-hooks", "@typescript-eslint", "prettier"],
  "rules": {
    "import/extensions": 0,

    "import/no-named-as-default-member": 0,
    "react/prop-types": 0,
    "react/display-name": 0,
    "react/react-in-jsx-scope": 0,

    // Require a whitespace at the beginning of a comment
    "spaced-comment": ["warn", "always"],

    // Maximum line length for comments
    // Trailing comments allowed beyond maximum line length
    "max-len": ["warn", { "code": 400, "comments": 100, "ignoreTrailingComments": true }],

    // Require PascalCase for user-defined JSX components
    "react/jsx-pascal-case": ["warn"],

    // Console logs cannot be committed.
    "no-console": ["warn"],

    // Require props to be sorted
    "react/jsx-sort-props": ["warn", { "callbacksLast": true, "shorthandFirst": true }],

    // Omit boolean prop value when set to true
    "react/jsx-boolean-value": ["warn", "never"],

    // Require self closing tags in JSX/HTML
    "react/self-closing-comp": ["warn", { "component": true, "html": true }],

    // Disallow unnecessary curly braces in JSX
    "react/jsx-curly-brace-presence": ["warn", "never"],

    // Require blank line before certain statements
    "padding-line-between-statements": [
      "warn",
      { "blankLine": "always", "prev": "*", "next": "function" },
      { "blankLine": "always", "prev": "*", "next": "class" },
      { "blankLine": "always", "prev": "*", "next": "export" },
      // Ignore consecutive export statements
      { "blankLine": "any", "prev": "export", "next": "export" },
      { "blankLine": "always", "prev": "*", "next": "return" },
      { "blankLine": "always", "prev": "*", "next": "break" },
      { "blankLine": "always", "prev": "*", "next": "continue" },
      { "blankLine": "always", "prev": "*", "next": "throw" }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
